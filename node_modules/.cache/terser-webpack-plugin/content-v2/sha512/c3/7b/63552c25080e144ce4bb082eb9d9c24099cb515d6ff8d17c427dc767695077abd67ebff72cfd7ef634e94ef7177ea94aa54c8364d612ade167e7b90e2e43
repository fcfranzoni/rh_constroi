{"map":"{\"version\":3,\"sources\":[\"/home/rh_constroi/src/containers/Home/index.js\",\"/home/rh_constroi/src/routes/Routes.js\",\"/home/rh_constroi/src/registerServiceWorker.js\",\"/home/rh_constroi/src/index.js\"],\"names\":[\"Home\",\"react_default\",\"a\",\"createElement\",\"Component\",\"Routes\",\"Switch\",\"Route\",\"exact\",\"path\",\"concat\",\"process\",\"component\",\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"registerValidSW\",\"swUrl\",\"navigator\",\"serviceWorker\",\"register\",\"then\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"state\",\"controller\",\"console\",\"log\",\"catch\",\"error\",\"stores\",\"_____APP_STATE_____\",\"render\",\"Provider\",\"BrowserRouter\",\"routes_Routes\",\"document\",\"getElementById\",\"URL\",\"origin\",\"addEventListener\",\"fetch\",\"response\",\"status\",\"headers\",\"get\",\"indexOf\",\"ready\",\"unregister\",\"reload\",\"checkValidServiceWorker\",\"registerServiceWorker\"],\"mappings\":\"kPAaeA,mLARP,OACIC,EAAAC,EAAAC,cAAA,MAAA,KAAA,eAJOC,EAAAA,WCWJC,EATA,WAAA,OACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,GAAAC,OAAKC,GAAL,KAAgCC,UAAWZ,MCI1Da,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,eCvD3DC,EAAS,GAWfrB,OAAOsB,oBAAsBD,EAE7BE,OAAAA,EAAAA,OAAAA,CACIrC,EAAAC,EAAAC,cAACoC,SAAaH,EACVnC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACIvC,EAAAC,EAAAC,cAACsC,EAAD,QAGRC,SAASC,eAAe,SDvBb,WACb,GAA6C,kBAAmBtB,UAAW,CAGzE,GADkB,IAAIuB,IAAIjC,GAAwBI,OAAOC,UAC3C6B,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAAV,OAAMC,GAAN,sBAEPE,GAiDV,SAAiCO,GAE/B2B,MAAM3B,GACHI,KAAK,SAAAwB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BT,OAAOC,SAASuC,aAKpBpC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAuB,CAAwBpC,GAIxBC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCHxBqC\",\"sourcesContent\":[\"import React, { Component } from 'react'\\n\\nclass Home extends Component {\\n    render() {\\n\\n        return (\\n            <div>\\n                Home\\n      </div>\\n        )\\n    }\\n}\\n\\nexport default Home\\n\",\"import React from 'react'\\nimport { Switch, Route } from 'react-router-dom'\\nimport Home from '../containers/Home'\\n\\nconst Routes = () => (\\n  <Switch>\\n    <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\\n    {/* <Route\\n      path={`${process.env.PUBLIC_URL}/rotinas/recebimento-faturado`}\\n      component={ReceiptBilled}\\n    /> */}\\n  </Switch>\\n)\\nexport default Routes\\n\",\"// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the \\\"N+1\\\" visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n)\\n\\nexport default function register() {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\\n      return\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Lets check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl)\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          )\\n        })\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl)\\n      }\\n    })\\n  }\\n}\\n\\nfunction registerValidSW(swUrl) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the old content will have been purged and\\n              // the fresh content will have been added to the cache.\\n              // It's the perfect time to display a \\\"New content is\\n              // available; please refresh.\\\" message in your web app.\\n              console.log('New content is available; please refresh.')\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.')\\n            }\\n          }\\n        }\\n      }\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error)\\n    })\\n}\\n\\nfunction checkValidServiceWorker(swUrl) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload()\\n          })\\n        })\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl)\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      )\\n    })\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister()\\n    })\\n  }\\n}\\n\",\"import React from 'react'\\nimport { render } from 'react-dom'\\nimport { BrowserRouter } from 'react-router-dom'\\n import Routes from './routes/Routes'\\n// import { Provider } from 'mobx-react'\\nimport  registerServiceWorker  from './registerServiceWorker'\\n//import 'semantic-ui-css-magalu/semantic.min.css'\\n\\n// config\\n// import config from \\\"./config\\\";\\n// stores\\n//import NavStore from './components/Nav/store'\\n\\n// import MainMenuStore from './components/MainMenu/store'\\n// import ExpeditionStore from './containers/Routines/Expedition/store'\\n// import ReceiptStore from './containers/Reports/Receipt/store'\\n// import TransportListStore from './containers/Routines/TransportList/store'\\n// import ReceiptBilledStore from './containers/Routines/ReceiptBilled/store'\\n// import ModalImportTransportListStore from './containers/Routines/ReceiptBilled/components/ModalImportTransportList/store'\\n\\n// css\\n// import \\\"semantic-ui-css/semantic.min.css\\\";\\nimport './index.css'\\n\\nconst stores = {\\n    //  NavStore\\n    //   MainMenuStore,\\n    //   ExpeditionStore,\\n    //   ReceiptStore,\\n    //   TransportListStore,\\n    //   ReceiptBilledStore,\\n    //   ModalImportTransportListStore\\n}\\n\\n// For easier debugging\\nwindow._____APP_STATE_____ = stores\\n\\nrender(\\n    <Provider {...stores}>\\n        <BrowserRouter>\\n            <Routes />\\n        </BrowserRouter>\\n    </Provider>,\\n    document.getElementById('root')\\n)\\nregisterServiceWorker()\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,n,o){e.exports=o(25)},23:function(e,n,o){},25:function(e,n,o){\"use strict\";o.r(n);var t=o(1),r=o.n(t),i=o(7),a=o(26),c=o(27),s=o(28),l=o(8),u=o(9),f=o(12),d=o(10),w=o(13),h=function(e){function n(){return Object(l.a)(this,n),Object(f.a)(this,Object(d.a)(n).apply(this,arguments))}return Object(w.a)(n,e),Object(u.a)(n,[{key:\"render\",value:function(){return r.a.createElement(\"div\",null,\"Home\")}}]),n}(t.Component),v=function(){return r.a.createElement(c.a,null,r.a.createElement(s.a,{exact:!0,path:\"\".concat(\"\",\"/\"),component:h}))},g=Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function p(e){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;n.onstatechange=function(){\"installed\"===n.state&&(navigator.serviceWorker.controller?console.log(\"New content is available; please refresh.\"):console.log(\"Content is cached for offline use.\"))}}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}o(23);var m={};window._____APP_STATE_____=m,Object(i.render)(r.a.createElement(Provider,m,r.a.createElement(a.a,null,r.a.createElement(v,null))),document.getElementById(\"root\")),function(){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var e=\"\".concat(\"\",\"/service-worker.js\");g?(function(e){fetch(e).then(function(n){404===n.status||-1===n.headers.get(\"content-type\").indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):p(e)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ\")})):p(e)})}}()}},[[15,2,1]]]);","extractedComments":[]}