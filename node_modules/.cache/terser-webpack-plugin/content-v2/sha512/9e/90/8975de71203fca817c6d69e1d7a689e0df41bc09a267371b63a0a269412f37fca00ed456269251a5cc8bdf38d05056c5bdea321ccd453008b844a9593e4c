{"map":"{\"version\":3,\"sources\":[\"/home/rh_constroi/src/registerServiceWorker.js\",\"/home/rh_constroi/src/index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"stores\",\"_____APP_STATE_____\",\"render\",\"react_default\",\"a\",\"createElement\",\"Provider\",\"BrowserRouter\",\"Routes\",\"document\",\"getElementById\",\"registerServiceWorker\"],\"mappings\":\"wJAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,qECQAC,EAAS,GAWfJ,OAAOK,oBAAsBD,EAE7BE,OAAAA,EAAAA,OAAAA,CACIC,EAAAC,EAAAC,cAACC,SAAaN,EACVG,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,OAAD,QAGRC,SAASC,eAAe,eAE5BC\",\"sourcesContent\":[\"// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the \\\"N+1\\\" visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n)\\n\\nexport default function register() {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\\n      return\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Lets check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl)\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          )\\n        })\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl)\\n      }\\n    })\\n  }\\n}\\n\\nfunction registerValidSW(swUrl) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the old content will have been purged and\\n              // the fresh content will have been added to the cache.\\n              // It's the perfect time to display a \\\"New content is\\n              // available; please refresh.\\\" message in your web app.\\n              console.log('New content is available; please refresh.')\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.')\\n            }\\n          }\\n        }\\n      }\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error)\\n    })\\n}\\n\\nfunction checkValidServiceWorker(swUrl) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload()\\n          })\\n        })\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl)\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      )\\n    })\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister()\\n    })\\n  }\\n}\\n\",\"import React from 'react'\\nimport { render } from 'react-dom'\\nimport { BrowserRouter } from 'react-router-dom'\\n// import Routes from './routes/Routes'\\n// import { Provider } from 'mobx-react'\\nimport { registerServiceWorker } from './registerServiceWorker'\\n//import 'semantic-ui-css-magalu/semantic.min.css'\\n\\n// config\\n// import config from \\\"./config\\\";\\n// stores\\n//import NavStore from './components/Nav/store'\\n\\n// import MainMenuStore from './components/MainMenu/store'\\n// import ExpeditionStore from './containers/Routines/Expedition/store'\\n// import ReceiptStore from './containers/Reports/Receipt/store'\\n// import TransportListStore from './containers/Routines/TransportList/store'\\n// import ReceiptBilledStore from './containers/Routines/ReceiptBilled/store'\\n// import ModalImportTransportListStore from './containers/Routines/ReceiptBilled/components/ModalImportTransportList/store'\\n\\n// css\\n// import \\\"semantic-ui-css/semantic.min.css\\\";\\nimport './index.css'\\n\\nconst stores = {\\n    //  NavStore\\n    //   MainMenuStore,\\n    //   ExpeditionStore,\\n    //   ReceiptStore,\\n    //   TransportListStore,\\n    //   ReceiptBilledStore,\\n    //   ModalImportTransportListStore\\n}\\n\\n// For easier debugging\\nwindow._____APP_STATE_____ = stores\\n\\nrender(\\n    <Provider {...stores}>\\n        <BrowserRouter>\\n            <Routes />\\n        </BrowserRouter>\\n    </Provider>,\\n    document.getElementById('root')\\n)\\nregisterServiceWorker()\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(o,n,e){},16:function(o,n,e){\"use strict\";e.r(n);var t=e(1),a=e.n(t),c=e(6),i=e(18);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));e(12);var l={};window._____APP_STATE_____=l,Object(c.render)(a.a.createElement(Provider,l,a.a.createElement(i.a,null,a.a.createElement(Routes,null))),document.getElementById(\"root\")),(void 0)()},7:function(o,n,e){o.exports=e(16)}},[[7,2,1]]]);","extractedComments":[]}